{"version":3,"sources":["icons/green_flag.svg","icons/red_flag.svg","components/start.js","components/finish.js","components/state.js","PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","algorithms/dijkstra.js","algorithms/aStar.js","icons/caret.svg","components/header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Start","props","draggable","className","src","greenFlag","Finish","redFlag","whatDrag","state","newDrag","undefined","Node","row","col","onMouseDown","onMouseEnter","onMouseUp","isStart","isFinish","isWall","useState","start","setStart","finish","setFinish","extraClass","onDrop","startRow","startCol","changeStart","finishRow","finishCol","changeFinish","id","onDragStart","onDragEnd","e","onDragOver","preventDefault","dijkstraAlgorithm","grid","visited","distance","unvisited","nodes","node","push","singleArrayGrid","length","sort","a","b","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","getUnvisitedNeighbours","neighbour","previousNode","aStarAlgorithm","console","log","g","h","Math","abs","sqrt","pow","_extends","Object","assign","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","_ref","svgRef","title","viewBox","ref","ForwardRef","forwardRef","Header","isDisabled","algorithms","clearAnimation","clearWall","mode","setMode","open","setOpen","window","onclick","event","matches","closest","Navbar","onClick","ButtonText","NavItem","icon","DropdownMenu","DropdownItem","href","children","temp","animate","stopBool","PathfindingVisualizer","mouseIsPressed","visitedNodesInOrder","setState","updateGrid","createGrid","pathNodes","setTimeout","pathAnimation","document","getElementById","path","currentNode","unshift","getPathDijkstra","animation","clearSettings","getPathAStar","stop","clearTimeout","visualizeDijkstraAlgorithm","visualizeAStarAlgorithm","DndProvider","backend","HTML5Backend","map","colIDX","nodeIDX","handleMouseDown","handleMouseEnter","handleMouseUp","Component","currentCol","createNode","newGrid","slice","newNode","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6f54aa84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/green_flag.a0c4b652.svg\";","module.exports = __webpack_public_path__ + \"static/media/red_flag.d5852834.svg\";","import React from 'react'\nimport greenFlag from '../icons/green_flag.svg'\n\nimport \"./header.scss\"\n\nexport default function Start(props) {\n    return (\n        <div draggable>\n            <img className = \"flags\" src={greenFlag} />\n        </div>\n    )\n}","import React from 'react'\nimport redFlag from '../icons/red_flag.svg'\n\nimport \"./header.scss\"\n\n\nexport default function Finish() {\n  return (\n    <img className = \"flags\" src={redFlag} />\n  )\n}","var whatDrag = null;\nvar prevNode = null;\n\nexport function state(newDrag) {\n    if(newDrag === undefined) {\n        return whatDrag;\n    }\n    whatDrag = newDrag;\n    return whatDrag;\n}\n\n// export function prevNode (node, start) {\n//     if(node === undefined) {\n//         return prevNode;\n//     }\n//     prevNode = node\n// }","import React, { Component, useState } from 'react';\nimport Start from '../../components/start'\nimport Finish from '../../components/finish'\nimport { state } from '../../components/state'\nimport './Node.scss';\n\nimport { changeStart, changeFinish } from '../PathfindingVisualizer'\n\nexport default function Node(props) {\n\n    const {row, col, onMouseDown, onMouseEnter, onMouseUp } = props\n\n    let { isStart, isFinish, isWall } = props\n\n    const [start, setStart] = useState(isStart);\n    const [finish, setFinish] = useState(isFinish);\n\n   \n\n    if(isStart || isFinish && isWall) {\n        isWall = false;\n    }\n    \n    const extraClass =\n    isStart? '':\n    isFinish? '':\n    isWall? 'node-wall':\n    '';\n\n    const onDragOver = (e) => {\n        e.preventDefault();\n    }\n\n    const onDrop= (row, col) => {\n        if(state()) {\n            changeStart(row, col);\n            setStart(true)\n            isStart = true\n        }\n        else{\n            changeFinish (row,col);\n            setFinish(true)\n            isFinish = true\n        }\n    }\n\n    const onDragStart = () => {\n        if (start) {\n            state(true);\n        }\n        else {\n            state(false);\n        }\n    }   \n    \n    const onDragEnd = (e) => {\n        \n        if(!!row) {\n            if (start) {\n                setStart(false)\n            }\n            else {\n                setFinish(false)\n            }\n        }\n    }\n\n    \n    return (\n    <div className = {`node ${extraClass}`}\n        id = {`node-${row}-${col}`}\n        onMouseDown = {() => onMouseDown(row, col)}\n        onMouseUp = {() => onMouseUp()}\n        onMouseEnter = {() => onMouseEnter(row, col)}\n        onDragStart = {() => onDragStart()}\n        onDragEnd = {(e) => onDragEnd(e)}\n        onDragOver={(e)=>onDragOver(e)}\n        onDrop = {() => {onDrop(row, col)}}\n    >\n        {start && <Start />}\n        \n        {finish && <Finish />}\n    </div>\n    )\n    \n}\n\n","import React, { Component } from 'react'\nimport Node from './Node/Node'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport './PathfindingVisualizer.scss'\nimport { render } from '@testing-library/react'\nimport { dijkstraAlgorithm, getPathDijkstra } from '../algorithms/dijkstra'\nimport { aStarAlgorithm, getPathAStar } from '../algorithms/aStar'\n\nimport Header from '../components/header'\n\nvar startRow = 10\nvar startCol = 10\n\nvar finishRow = 10\nvar finishCol = 40\n\nvar animate = [];\nvar temp;\nvar stopBool = false;\n\n\nexport default class PathfindingVisualizer extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            isDisabled: false\n        }\n        this.visitedNodesInOrder = []\n    }\n\n    handleMouseDown(row, col) {\n        if((row == startRow && col == startCol)||(row == finishRow && col == finishCol)) return;      \n        this.setState({grid: updateGrid(row, col, this.state.grid), mouseIsPressed: true})\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false})\n        \n    }\n\n    handleMouseEnter(row, col) {\n        if((row == startRow && col == startCol)||(row == finishRow && col == finishCol)) return;\n        if(this.state.mouseIsPressed == false) return;\n        \n        this.setState({grid: updateGrid(row, col, this.state.grid)})\n    }\n\n    componentDidMount () {\n        const grid = createGrid();\n\n        this.setState({grid: grid})\n    }\n\n    animation(visitedNodesInOrder, pathNodes){\n        for(let i = 0; i<=visitedNodesInOrder.length; i++) {\n            if(visitedNodesInOrder.length === i) {\n                setTimeout(() => {\n                    this.pathAnimation(pathNodes)\n                }, 10*i)\n                return;\n            }\n\n            else{\n            temp = setTimeout(() => {\n                    const node = visitedNodesInOrder[i]\n\n                    if(!((node.row==finishRow && node.col == finishCol) || (node.row==startRow && node.col == startCol))) {\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited'\n                    }\n                }, 10*i)\n                animate.push(temp)\n            }\n        }\n   \n    }\n\n    pathAnimation(pathNodes) {\n        if(stopBool) {\n            stopBool = false;\n            return;\n        }\n        else{\n            for(let i = 0; i<pathNodes.length; i++) {\n                temp = setTimeout(() => {\n                    const node = pathNodes[i]\n\n                    if (!((node.row==finishRow && node.col == finishCol) || (node.row==startRow && node.col == startCol))){\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path'\n                    }\n                }, 50*i)\n                animate.push(temp)\n            }\n        }\n    }\n\n    visualizeDijkstraAlgorithm(){\n        this.setState({isDisabled: true})\n        console.log(this.state.isDisabled)\n        const {grid} = this.state;\n        const start = grid[startCol][startRow]\n        const finish = grid[finishCol][finishRow]\n        \n        this.visitedNodesInOrder = dijkstraAlgorithm(grid, start, finish)\n\n        const pathNodes = getPathDijkstra(finish)\n        \n        stopBool = false\n        this.animation(this.visitedNodesInOrder, pathNodes)\n        this.clearSettings()\n    }\n\n    visualizeAStarAlgorithm(){\n        this.setState({isDisabled: true})\n        const {grid} = this.state;\n        const start = grid[startCol][startRow]\n        const finish = grid[finishCol][finishRow]\n        \n        this.visitedNodesInOrder = aStarAlgorithm(grid, start, finish)\n        console.log(this.visitedNodesInOrder)\n\n        const pathNodes = getPathAStar(finish)\n        \n        stopBool = false\n        this.animation(this.visitedNodesInOrder, pathNodes)\n        this.clearSettings()\n    }\n  \n    clearAnimation() {\n        this.setState({isDisabled: false})\n        if(this.visitedNodesInOrder.length == 0) return;\n        else {\n            this.stop();\n            for(let i = 0; i< this.visitedNodesInOrder.length; i++) {\n                setTimeout(() => {\n                    const node = this.visitedNodesInOrder[i]\n                    \n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node'\n                }, 0.1)\n            }\n        }\n    }\n    \n    clearWall() {\n        for(let col = 0; col<50; col++) {\n            for(let row = 0; row< 25; row++) {\n                if(this.state.grid[col][row].isWall) {\n                    updateGrid(row, col, this.state.grid);\n                    document.getElementById(`node-${row}-${col}`).className = 'node'\n                }\n            }\n        }\n    }\n\n    stop() {\n        stopBool = true\n        for(let i = 0; i < animate.length; i++) {\n            clearTimeout(animate[i]);\n        }\n    }\n\n    clearSettings() {\n        this.setState({isDisabled: false})\n        for (let node of this.visitedNodesInOrder) {\n            node.isVisited = false\n            node.previousNode = null\n            node.distance = Infinity\n            node.g = 0\n        }\n    }\n  \n    render() {\n        \n        const {grid, mouseIsPressed} = this.state\n        const algorithms = [() => this.visualizeDijkstraAlgorithm(), () => this.visualizeAStarAlgorithm(),]\n\n        return (\n            <DndProvider backend={HTML5Backend}>\n                <Header isDisabled = {this.state.isDisabled} clearAnimation = {() => this.clearAnimation()} clearWall = {() => this.clearWall()} algorithms = {algorithms}></Header>\n                <div className= \"container\">\n                    <div className= \"grid\">\n                        {grid.map((col, colIDX) => \n                        <div  key={colIDX}>\n                            {col.map((node, nodeIDX) => {\n                                const {isStart, isFinish, isWall} = node\n                                return (\n                                    <Node className=\"cell\"\n                                        key={nodeIDX}\n                                        row={nodeIDX}\n                                        col={colIDX} \n                                        isStart ={isStart}\n                                        isFinish= {isFinish}\n                                        isWall = {isWall}\n                                        mouseIsPressed = {mouseIsPressed}\n                                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                        onMouseUp={() => this.handleMouseUp()}\n                                    >   \n                                    </Node> \n                                )\n                                }\n                            )}\n                        </div>)}\n                    </div>\n                </div>\n            </DndProvider>\n        )\n    }\n}\n\nconst createGrid = () => {\n    const grid = []\n    for(let col = 0; col<50; col++) {\n        const currentCol = []\n        for(let row = 0; row< 25; row++) {\n            currentCol.push(createNode(row, col, false))\n        }\n        grid.push(currentCol)\n    }\n    return grid;\n}\n\nconst createNode = (row, col) => {\n    return (\n        {\n            row: row,\n            col: col,\n            isStart: row==startRow && col == startCol,\n            isFinish: row==finishRow && col == finishCol,\n            isWall: false,\n            isVisited: false,\n            previousNode: null,\n            distance: Infinity,\n            g: 0,\n        }\n    )\n}\n\nconst updateGrid = (row, col, grid) => {\n    const newGrid = grid.slice();\n    const node = newGrid[col][row];\n    const newNode = {\n      ...node,\n      isWall: !node.isWall,\n    };\n    newGrid[col][row] = newNode;\n    return newGrid;\n};\n\nexport function changeStart (row, col) {\n    \n    startRow = row;\n    startCol = col;\n}\n\nexport function changeFinish (row, col) {\n\n    finishRow = row;\n    finishCol = col;\n}","// Dijkstra Algorithm implementation in JS\n\nexport function dijkstraAlgorithm (grid, start, finish) {\n    const visited = []\n\n    start.distance= 0\n    const unvisited = singleArrayGrid(grid)\n\n    while (!!unvisited.length) {\n        sortNodesByDistance(unvisited)\n        const closestNode = unvisited.shift()\n\n        if(closestNode.isWall) continue;\n\n        if(closestNode.distance === Infinity) return visited;\n\n        closestNode.isVisited = true\n        visited.push(closestNode)\n\n        if(closestNode === finish) return visited;\n\n        updateUnvisitedNeighbours(closestNode, grid)\n    }\n}\n\nexport function getPathDijkstra(finish){\n    const path = []\n    let currentNode = finish\n\n    while(currentNode !== null) {\n        path.unshift(currentNode)\n\n        currentNode = currentNode.previousNode\n    }\n    return path\n}\n\nfunction singleArrayGrid(grid) {\n    const nodes = []\n\n    for(let col of grid) {\n        for(let node of col) {\n            nodes.push(node)\n        }\n    }\n\n    return nodes\n}\n\nfunction sortNodesByDistance(array) {\n    array.sort((a, b) => a.distance - b.distance)\n}\n\nfunction updateUnvisitedNeighbours(node, grid) {\n    const unvisitedNeighbours = getUnvisitedNeighbours(node, grid)\n\n    for(let neighbour of unvisitedNeighbours) {\n        neighbour.distance = node.distance +1\n        neighbour.previousNode = node\n    }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n    const neighbours= []\n\n    const {col, row} = node\n\n    if(row>0) neighbours.push(grid[col][row-1])\n    if(row<grid[0].length-1) neighbours.push(grid[col][row+1])\n    if(col>0) neighbours.push(grid[col-1][row])\n    if(col<grid.length -1) neighbours.push(grid[col+1][row])\n\n    return neighbours.filter(node => !node.isVisited)\n}","//A* algorithm implementation in JS\n\nexport function aStarAlgorithm(grid, start, finish) {\n    const visited = []\n\n    start.distance = 0                                  //note that A star algorithm resources commonly use \"f\" instead of \"distance\", distance = g+h\n    const unvisited = singleArrayGrid(grid)\n\n    while(!!unvisited.length) {\n        sortNodesByf(unvisited)\n        const closestNode = unvisited.shift()\n\n        if(closestNode.isWall) continue;\n\n        if(closestNode.distance === Infinity) return visited;\n\n        closestNode.isVisited = true;\n        visited.push(closestNode)\n\n        if(closestNode == finish) return visited\n        \n        updateUnvisitedNeighbours(closestNode, grid, finish);\n    }\n}\n\nexport function getPathAStar(finish) {\n    const path = []\n    let currentNode = finish\n\n    while (currentNode != null) {\n        path.unshift(currentNode)\n\n        currentNode = currentNode.previousNode\n    }\n\n    return path\n}\n\nfunction singleArrayGrid(grid) {\n    const nodes = []\n\n    for(let col of grid) {\n        for(let node of col) {\n            nodes.push(node)\n        }\n    }\n\n    return nodes\n}\n\nfunction sortNodesByf(array) {\n    array.sort((a, b) => a.distance - b.distance)\n}\n\nfunction updateUnvisitedNeighbours(node, grid, finish) {\n    const unvisitedNeighbours = getUnvisitedNeighbours(node, grid)\n    console.log(unvisitedNeighbours)\n\n    for(let neighbour of unvisitedNeighbours) {\n        neighbour.g = node.g +1\n        var h = Math.abs(Math.sqrt(Math.pow(finish.row - node.row, 2) + Math.pow(finish.col - node.col, 2)))\n        neighbour.distance = neighbour.g + h\n        neighbour.previousNode = node\n    }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n    const neighbours = []\n\n    const {col, row} = node\n\n    if(row>0) neighbours.push(grid[col][row-1])\n    if(row<grid[0].length-1) neighbours.push(grid[col][row+1])\n    if(col>0) neighbours.push(grid[col-1][row])\n    if(col<grid.length -1) neighbours.push(grid[col+1][row])\n\n    return neighbours.filter(node => !node.isVisited)\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z\",\n  className: \"\"\n});\n\nvar SvgCaret = function SvgCaret(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 320 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgCaret, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/caret.615e14d1.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from 'react'\n\nimport {ReactComponent as Caret} from '../icons/caret.svg'\n\nimport './header.scss'\n\n\n\nexport default function Header(props) {\n    const {isDisabled, algorithms, clearAnimation, clearWall} = props\n\n    const [mode, setMode] = useState(null)\n    const [open, setOpen] = useState(false)\n\n    window.onclick = function(event) {\n        if(!(event.target.matches('.icon-button') || event.target.closest('.icon-button'))) {\n            setOpen(false)\n        }\n    }\n    \n    return(\n        <Navbar>\n            <button className = \"button\" onClick = {algorithms[mode]}><ButtonText mode = {mode}/></button>\n            <div onClick = {() => setOpen(!open)}>\n                <NavItem icon = {<Caret />}>\n                    {open && <DropdownMenu></DropdownMenu>}\n                </NavItem>\n            </div>\n            <button className = \"button reset\" onClick = {() => clearAnimation()}>Reset</button>\n            <button className = \"button clearWall\" onClick = {() => clearWall()}>Clear Wall</button>\n        </Navbar>\n    )\n    function DropdownMenu(props){\n        function DropdownItem(props) {\n            return(\n                <a href = \"#\" className=\"menu-item\" onClick = {() => {setMode(props.mode); setOpen(false)}}>\n                    {props.children}\n                </a>\n            )\n        }\n\n        return(\n            <>\n                <div className=\"dropdown\">\n                    <DropdownItem mode = {0}>Dijkstra's Algorithm</DropdownItem>\n                    <DropdownItem mode = {1}>A* Algorithm</DropdownItem>\n                </div>\n            </>\n            \n        )\n    }\n}\n\nfunction Navbar(props) {\n    \n    return (\n        <nav className=\"navbar\">\n            <ul className=\"navbar-nav\">\n                {props.children}\n            </ul>\n        </nav>\n    );\n}\n\nfunction NavItem(props) {\n    return (\n        <li className= \"nav-item\">\n            <a href = \"#\" className = \"icon-button\">\n                {props.icon}\n            </a>\n            {props.children}\n        </li>\n    )\n}\n\nfunction ButtonText(props){\n   \n    if( props.mode == 0) {\n        return (\n            <p>\n                Visualize Dijkstra's Algorithm\n            </p>\n        )\n    }\n    else if (props.mode == 1) {\n        return (\n            <p>\n                Visualiza A* Algorithm\n            </p>\n        )\n    }\n    else {\n        return (\n            <p>Please choose an algorithm</p>\n        )\n    }\n}","import React, { useState } from 'react';\nimport './App.scss';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className = \"App\">\n      <PathfindingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}